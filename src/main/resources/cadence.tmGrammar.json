{
  "scopeName": "source.cadence",
  "patterns": [
    { "include": "#comments" },
    { "include": "#expressions" },
    { "include": "#declarations" },
    { "include": "#keywords" },
    { "include": "#code-block" },
    { "include": "#composite" },
    { "include": "#event" }
  ],
  "repository": {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.cadence"
            }
    },
    "literals": {
        },
        "string": {
          "repository": {
            "string-guts": {
              "patterns": [
                {
                  "match": "\\\\[0\\\\tnr\"']",
                  "name": "constant.character.escape.cadence"
                },
                {
                  "match": "\\\\u\\{[0-9a-fA-F]{1,8}\\}",
                  "name": "constant.character.escape.unicode.cadence"
                }
              ]
            }
    },
    "function": {
      "begin": "\\b(fun)\\b\\s+([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.cadence"
        },
        "2": {
          "name": "entity.name.function.cadence"
        }
      },
      "end": "(?<=\\})|$",
      "name": "meta.definition.function.cadence",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#parameter-clause"
        },
        {
          "include": "#function-result"
        },
        {
          "begin": "(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.function.begin.cadence"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.function.end.cadence"
            }
          },
          "name": "meta.definition.function.body.cadence",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "initializer": {
      "begin": "(?<!\\.)\\b(init)\\s*(?=\\(|<)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.cadence"
        }
      },
      "end": "(?<=\\})|$",
      "name": "meta.definition.function.initializer.cadence",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#parameter-clause"
        },
        {
          "begin": "(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.function.begin.cadence"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.function.end.cadence"
            }
          },
          "name": "meta.definition.function.body.cadence",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "function-result": {
      "begin": "(?<![/=\\-+!*%<>&|\\^~.])(:)(?![/=\\-+!*%<>&|\\^~.])\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.function-result.cadence"
        }
      },
      "end": "(?!\\G)(?=\\{|;)|$",
      "name": "meta.function-result.cadence",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "expressions": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#function-call-expression" },
        { "include": "#literals" },
        { "include": "#operators" },
        { "include": "#language-variables" }
      ]
    },
    "function-call-expression": {
      "patterns": [
        {
          "begin": "(?!(?:set|init))([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.any-method.cadence"
            },
            "4": {
              "name": "punctuation.definition.arguments.begin.cadence"
            }
          },
          "comment": "foo(args) -- a call whose callee is a highlightable name",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.end.cadence"
            }
          },
          "name": "meta.function-call.cadence",
          "patterns": [
            {
              "include": "#expression-element-list"
            }
          ]
        }
      ]
    },
    "expression-element-list": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "begin": "([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s*(:)",
          "beginCaptures": {
            "1": {
              "name": "support.function.any-method.cadence"
            },
            "2": {
              "name": "punctuation.separator.argument-label.cadence"
            }
          },
          "comment": "an element with a label",
          "end": "(?=[,)\\]])",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "begin": "(?![,)\\]])(?=\\S)",
          "comment": "an element without a label (i.e. anything else)",
          "end": "(?=[,)\\]])",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    },
-- varvariable type    },
    "type": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "match": "([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)",
          "name": "storage.type.cadence"
        }
      ]
    },
    "parameter-clause": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.begin.cadence"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.end.cadence"
        }
      },
      "name": "meta.parameter-clause.cadence",
      "patterns": [
        {
          "include": "#parameter-list"
        }
      ]
    },
    "parameter-list": {
      "patterns": [
        {
          "match": "([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s+([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)(?=\\s*:)",
          "captures": {
            "1": {
              "name": "entity.name.function.cadence"
            },
            "2": {
              "name": "variable.parameter.function.cadence"
            }
          },
          "comment": "External parameter labels are considered part of the function name"
        },
        {
          "match": "(([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*))(?=\\s*:)",
          "captures": {
            "1": {
              "name": "variable.parameter.function.cadence"
            },
            "2": {
              "name": "entity.name.function.cadence"
            }
          },
          "comment": "If no external label is given, the name is both the external label and the internal variable name"
        },
        {

